function board.new 0
push constant 9
call Memory.alloc 1
pop pointer 0
push constant 0
pop static 1
push constant 1
pop static 2
push constant 2
pop static 3
push constant 3
pop static 4
push constant 100
call Array.new 1
pop static 5
push constant 0
pop this 2
label WHILE_EXP0
push this 2
push constant 100
lt
not
if-goto WHILE_END0
push this 2
push static 5
add
push static 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 2
push constant 1
add
pop this 2
goto WHILE_EXP0
label WHILE_END0
push constant 1
pop this 2
push constant 1
pop this 5
label WHILE_EXP1
push this 5
push constant 9
lt
not
if-goto WHILE_END1
label WHILE_EXP2
push this 2
push constant 9
lt
not
if-goto WHILE_END2
push this 2
push this 5
push constant 10
call Math.multiply 2
add
push static 5
add
push static 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 2
push constant 1
add
pop this 2
goto WHILE_EXP2
label WHILE_END2
push this 5
push constant 1
add
pop this 5
push constant 1
pop this 2
goto WHILE_EXP1
label WHILE_END1
push constant 44
push static 5
add
push static 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 45
push static 5
add
push static 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 54
push static 5
add
push static 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 55
push static 5
add
push static 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
call Screen.clearScreen 0
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
return
function board.newInstance 0
call board.new 0
pop static 0
push constant 0
return
function board.getInstance 0
push static 0
return
function board.init 0
push argument 0
pop pointer 0
push constant 24
push constant 7
call Math.multiply 2
pop this 7
push constant 24
pop this 6
push this 7
pop this 3
push this 6
pop this 4
push constant 0
pop this 2
push constant 0
pop this 5
push constant 24
pop this 8
call Screen.clearScreen 0
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
label WHILE_EXP0
push this 2
push constant 9
lt
not
if-goto WHILE_END0
push this 3
push this 6
push this 3
push this 6
push this 8
push constant 8
call Math.multiply 2
add
call Screen.drawLine 4
pop temp 0
push this 7
push this 4
push this 7
push this 8
push constant 8
call Math.multiply 2
add
push this 4
call Screen.drawLine 4
pop temp 0
push this 2
push constant 1
add
pop this 2
push this 3
push this 8
add
pop this 3
push this 4
push this 8
add
pop this 4
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function board.draw 0
push argument 0
pop pointer 0
push constant 24
pop this 6
push constant 24
pop this 8
push constant 0
pop this 2
label WHILE_EXP0
push this 2
push constant 100
lt
not
if-goto WHILE_END0
push this 2
push static 5
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 2
push constant 10
push this 2
push constant 10
call Math.divide 2
call Math.multiply 2
sub
push this 8
call Math.multiply 2
push this 8
neg
push constant 2
call Math.divide 2
add
push this 7
add
push this 2
push constant 10
call Math.divide 2
push this 8
call Math.multiply 2
push this 8
push constant 2
call Math.divide 2
add
push constant 10
call Screen.drawCircle 3
pop temp 0
label IF_FALSE0
push this 2
push static 5
add
pop pointer 1
push that 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 2
push constant 10
push this 2
push constant 10
call Math.divide 2
call Math.multiply 2
sub
push this 8
call Math.multiply 2
push this 8
neg
push constant 2
call Math.divide 2
add
push this 7
add
push this 2
push constant 10
call Math.divide 2
push this 8
call Math.multiply 2
push this 8
push constant 2
call Math.divide 2
add
push constant 10
call Screen.drawCircle 3
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 2
push constant 10
push this 2
push constant 10
call Math.divide 2
call Math.multiply 2
sub
push this 8
call Math.multiply 2
push this 8
neg
push constant 2
call Math.divide 2
add
push this 7
add
push this 2
push constant 10
call Math.divide 2
push this 8
call Math.multiply 2
push this 8
push constant 2
call Math.divide 2
add
push constant 9
call Screen.drawCircle 3
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF_FALSE1
push this 2
push constant 1
add
pop this 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function board.flip 2
push argument 0
push argument 1
push constant 10
call Math.multiply 2
add
pop local 1
push constant 1
pop local 0
push argument 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
label WHILE_EXP0
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 1
eq
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
label WHILE_EXP1
push local 0
push constant 0
gt
not
if-goto WHILE_END1
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
push static 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
not
return
label IF_FALSE1
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 3
eq
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 4
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
goto WHILE_EXP0
label WHILE_END0
goto IF_END0
label IF_FALSE0
label WHILE_EXP2
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 2
eq
not
if-goto WHILE_END2
push local 0
push constant 1
add
pop local 0
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
label WHILE_EXP3
push local 0
push constant 0
gt
not
if-goto WHILE_END3
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
push static 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP3
label WHILE_END3
push constant 0
not
return
label IF_FALSE3
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 3
eq
push local 1
push local 0
push argument 3
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 4
eq
or
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
return
label IF_FALSE4
goto WHILE_EXP2
label WHILE_END2
label IF_END0
push constant 0
return
function board.stone_num 1
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop this 2
label WHILE_EXP0
push this 2
push constant 100
lt
not
if-goto WHILE_END0
push this 2
push static 5
add
pop pointer 1
push that 0
push argument 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
label IF_FALSE0
push this 2
push constant 1
add
pop this 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function board.reverse 1
push argument 0
pop pointer 0
push constant 0
pop local 0
push argument 1
push argument 2
push constant 10
call Math.multiply 2
add
push static 5
add
pop pointer 1
push that 0
push static 3
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
label IF_FALSE0
push local 0
push argument 1
push argument 2
push argument 3
push constant 11
neg
call board.flip 4
or
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push constant 10
neg
call board.flip 4
or
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push constant 9
neg
call board.flip 4
or
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push constant 1
neg
call board.flip 4
or
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push constant 1
call board.flip 4
or
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push constant 9
call board.flip 4
or
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push constant 10
call board.flip 4
or
pop local 0
push local 0
push argument 1
push argument 2
push argument 3
push constant 11
call board.flip 4
or
pop local 0
push local 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 3
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push argument 2
push constant 10
call Math.multiply 2
add
push static 5
add
push static 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END2
label IF_FALSE2
push argument 1
push argument 2
push constant 10
call Math.multiply 2
add
push static 5
add
push static 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END2
label IF_FALSE1
push local 0
return
